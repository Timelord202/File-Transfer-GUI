# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'app.ui'
#
# Created by: PyQt5 UI code generator 5.9.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from pathlib import Path
from threading import Thread
import socket, time, pickle, os

class Ui_MainWindow(object):

    def openFile(self):
        try:
            self.file = QFileDialog.getOpenFileName()           # Open File Explorer
            self.filefin = Path(self.file[0])                   # Get the path the user selected
            self.Fileselectedlabel.setText('File selected:')    # Change label to 'File selected'
            self.Filenamelabel.setText(self.filefin.name)       # Change empty label to file name
            with open(self.file[0], 'rb') as file_name:         # Open the file and read bytes
                self.file = file_name.read()                    #

        except FileNotFoundError:                               # If the file dialog was opened but nothing was selected
            self.Fileselectedlabel.setText('No file selected')  # 

    def recieve(self):
        self.Clientlabel.setText("No client connected")                     # Sets Client label to 'Client connected' 
        self.recieved_data = b''                                            # Create self.recieved
        self.ip = socket.gethostbyname(socket.gethostname())                # Gets computers IP address
        self.port = 1234                                                    # Sets port for socket to use
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)       # Create a TCP socket
        self.sock.bind((self.ip, self.port))                                # Bind it to the ip and port
        self.sock.listen()                                                  # Listen for connection
        self.conn, self.addr = self.sock.accept()                           # Get clients socket and IP address
        self.Clientlabel.setText("Client connected")                        # Sets Client label to 'Client connected' 
        while True:
            try:
                self.data = self.conn.recv(4096)                            # Recieve Client data
                self.recieved_data += self.data                             # Add self.data to self.recieved_data 
                self.norm_data = pickle.loads(self.recieved_data)           # Load serialized data

                with open(self.norm_data[0].decode(), 'wb') as file:        # Write bytes to a new file and name it the first element in the recieved data list
                    file.write(self.norm_data[1])                           # Write recieved bytes to the data
                    self.recieved_data = b''                                # Empty recieved_data

            except pickle.PickleError:
                continue

            except socket.error:
                self.Clientlabel.setText("No client connected")
                continue


    def send(self):
        self.sending = [self.filefin.name.encode(), self.file]  # Creates a list of the file name and file data (self.file is already in bytes)
        self.data_sending = pickle.dumps(self.sending)          # Serializes the list
        self.conn.sendall(self.data_sending)                    # Sends the serialized list

        
        
    def setupUi(self, MainWindow):
        
        #Generated by Designer
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setMinimumSize(QtCore.QSize(800, 600))
        MainWindow.setMaximumSize(QtCore.QSize(800, 600))
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        MainWindow.setToolTip("")
        MainWindow.setStatusTip("")
        MainWindow.setStyleSheet(open('QSS.css').read())
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Sendfilebutton = QtWidgets.QPushButton(self.centralwidget)
        self.Sendfilebutton.setEnabled(True)
        self.Sendfilebutton.setGeometry(QtCore.QRect(310, 470, 181, 51))
        self.Sendfilebutton.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.Sendfilebutton.setStyleSheet("")
        self.Sendfilebutton.setFlat(False)
        self.Sendfilebutton.setObjectName("Sendfilebutton")
        self.Fileselectedlabel = QtWidgets.QLabel(self.centralwidget)
        self.Fileselectedlabel.setGeometry(QtCore.QRect(90, 30, 601, 71))
        self.Fileselectedlabel.setScaledContents(False)
        self.Fileselectedlabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Fileselectedlabel.setWordWrap(False)
        self.Fileselectedlabel.setObjectName("Fileselectedlabel")
        self.Clientlabel = QtWidgets.QLabel(self.centralwidget)
        self.Clientlabel.setGeometry(QtCore.QRect(0, 270, 800, 61))
        self.Clientlabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Clientlabel.setObjectName("Clientlabel")
        self.Filenamelabel = QtWidgets.QLabel(self.centralwidget)
        self.Filenamelabel.setGeometry(QtCore.QRect(0, 170, 800, 51))
        self.Filenamelabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Filenamelabel.setObjectName("Filenamelabel")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menuBar.setObjectName("menuBar")
        self.menuFile = QtWidgets.QMenu(self.menuBar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menuBar)
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_as = QtWidgets.QAction(MainWindow)
        self.actionSave_as.setObjectName("actionSave_as")
        self.actionCopy = QtWidgets.QAction(MainWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(MainWindow)
        self.actionPaste.setObjectName("actionPaste")
        self.actionOpen_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_file.setObjectName("actionOpen_file")
        self.menuFile.addAction(self.actionOpen_file)
        self.menuBar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Not generated by designer

        self.actionOpen_file.triggered.connect(self.openFile)   # Opening the file in File Explorer
        self.actionOpen_file.setShortcut('Ctrl+O')              # Set shortcut for opening file
        self.Sendfilebutton.clicked.connect(self.send)          # Sends the file from openFile

        self.tlisten = Thread(target=self.recieve, daemon=True) # Creates thread of self.recieved, daemon kills thread when program exits
        self.tlisten.start()                                    # Start the thread

        self.Clientlabel.setText("No client connected")         # Set client label to 'No client connected' when it is created
        

            

    def retranslateUi(self, MainWindow):

        #Generated by designer
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "File Transfer (Server)"))
        self.Sendfilebutton.setText(_translate("MainWindow", "Send file"))
        self.Fileselectedlabel.setText(_translate("MainWindow", "No file selected"))
        #self.Clientlabel.setText(_translate("MainWindow", ""))                         Set manually in above code
        #self.Filenamelabel.setText(_translate("MainWindow", ""))                       Set manually in above code
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionOpen_file.setText(_translate("MainWindow", "Select file"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())