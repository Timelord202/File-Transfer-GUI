# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'app.ui'
#
# Created by: PyQt5 UI code generator 5.9.2
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from pathlib import Path
from threading import Thread
import socket, pickle, os, sys

class Ui_MainWindow(object):

    conn_ip = input('IPv4 address your connecting to: ')
    def openFile(self):
        try:
            self.file = QFileDialog.getOpenFileName()           # Open File Explorer
            self.filefin = Path(self.file[0])                   # Get the path the user selected
            self.Fileselectedlabel.setText('File selected:')    # Change label to 'File selected'
            self.Filenamelabel.setText(self.filefin.name)       # Change empty label to file name
            with open(self.file[0], 'rb') as file_name:         # Open the file and read bytes
                self.file = file_name.read()                    #

        except FileNotFoundError:                               # When file dialog is opened but no file is selected
            self.Fileselectedlabel.setText('No file selected')  #

    def recieve(self):
        self.Serverlabel.setText('Connected to server')         # Set server label to 'Connected to server'
        self.recieved_data = b''                                # Create variable with empty byte string
        try:
            self.port = 1234                                                # Set port to 1234
            self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   # Create TCP socket
            self.sock.connect((self.conn_ip, self.port))                    # Connect to the IP inputted above at port 1234
        except:                                                             # User doesn't enter a valid IP address
            print("Incorrect IP address")


        while True:
            try:
                self.data = self.sock.recv(4096)                            # Constantly recieve data
                self.recieved_data += self.data                             # Keep adding serialized byte string to self.recieved_data
                self.norm_data = pickle.loads(self.recieved_data)           # Load pickle data (if no all data recieved, pickle.PickleError is raised)

                with open(self.norm_data[0].decode(), 'wb') as file:        # Open file with first element of the list as the file name
                    file.write(self.norm_data[1])                           # write bytes to the file
                    self.recieved_data = b''                                # Empty self.recieved_data

            except pickle.PickleError:                                      # Pickle data is not complete (socket is still recieving data)
                continue                                                    #

            except socket.error:                                            # Server disconnects
                self.Serverlabel.setText('Disconnected from Server\nRestart application to re-establish connection')
                continue
                

    def send(self):
        self.sending = [self.filefin.name.encode(), self.file]              # Sending list with file name as [0] being the file name and [1] as file data
        self.data_sending = pickle.dumps(self.sending)                      # Serialize data
        self.sock.sendall(self.data_sending)                                # Send data
            
        
        
    def setupUi(self, MainWindow):
        
        #Generated by Designer
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setMinimumSize(QtCore.QSize(800, 600))
        MainWindow.setMaximumSize(QtCore.QSize(800, 600))
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        MainWindow.setToolTip("")
        MainWindow.setStatusTip("")
        MainWindow.setStyleSheet(open('QSS.css').read())
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Sendfilebutton = QtWidgets.QPushButton(self.centralwidget)
        self.Sendfilebutton.setEnabled(True)
        self.Sendfilebutton.setGeometry(QtCore.QRect(310, 470, 181, 51))
        self.Sendfilebutton.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.Sendfilebutton.setStyleSheet("")
        self.Sendfilebutton.setFlat(False)
        self.Sendfilebutton.setObjectName("Sendfilebutton")
        self.Fileselectedlabel = QtWidgets.QLabel(self.centralwidget)
        self.Fileselectedlabel.setGeometry(QtCore.QRect(90, 30, 601, 71))
        self.Fileselectedlabel.setScaledContents(False)
        self.Fileselectedlabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Fileselectedlabel.setWordWrap(False)
        self.Fileselectedlabel.setObjectName("Fileselectedlabel")
        self.Filenamelabel = QtWidgets.QLabel(self.centralwidget)
        self.Filenamelabel.setGeometry(QtCore.QRect(0, 120, 800, 31))
        self.Filenamelabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Filenamelabel.setObjectName("Filenamelabel")

        self.Serverlabel = QtWidgets.QLabel(self.centralwidget)
        self.Serverlabel.setGeometry(QtCore.QRect(300, 180, 191, 61))
        self.Serverlabel.setAlignment(QtCore.Qt.AlignCenter)
        self.Serverlabel.setObjectName("Serverlabel")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menuBar.setObjectName("menuBar")
        self.menuFile = QtWidgets.QMenu(self.menuBar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menuBar)
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.actionSave_as = QtWidgets.QAction(MainWindow)
        self.actionSave_as.setObjectName("actionSave_as")
        self.actionCopy = QtWidgets.QAction(MainWindow)
        self.actionCopy.setObjectName("actionCopy")
        self.actionPaste = QtWidgets.QAction(MainWindow)
        self.actionPaste.setObjectName("actionPaste")
        self.actionOpen_file = QtWidgets.QAction(MainWindow)
        self.actionOpen_file.setObjectName("actionOpen_file")
        self.menuFile.addAction(self.actionOpen_file)
        self.menuBar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        #Not generated by designer 
        self.actionOpen_file.triggered.connect(self.openFile)       # Opening the file in File Explorer
        self.actionOpen_file.setShortcut('Ctrl+O')                  # Set shortcut for opening file
        self.Sendfilebutton.clicked.connect(self.send)              # Sends the file from openFile

        self.tlisten = Thread(target=self.recieve, daemon=True)     # Create recieve thread
        self.tlisten.start()                                        #

            

    def retranslateUi(self, MainWindow):

        #Generated by designer
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "File transfer (Client)"))
        self.Sendfilebutton.setText(_translate("MainWindow", "Send file"))
        self.Fileselectedlabel.setText(_translate("MainWindow", "No file selected"))
        self.Filenamelabel.setText(_translate("MainWindow", ""))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionOpen_file.setText(_translate("MainWindow", "Select file"))
        #self.Serverlabel.setText(_translate("MainWindow", ""))                         Set manually in above code


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
